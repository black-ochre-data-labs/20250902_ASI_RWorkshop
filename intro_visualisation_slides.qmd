---
title: "Visualising and Plotting Data"
subtitle: "ASI: Introduction to R"
author: "Dr Stevie Pederson"
institute: |
  | Black Ochre Data Labs
  | The Kids Research Institute Australia
date: "2025-09-02"
date-format: long
bibliography: bibliography.bib
title-slide-attributes:
    data-background-color: "#3d3d40"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [bodl.scss]
    code-line-numbers: false
    code-tools: true
    logo: assets/bodl_logo_white_background.jpg
    height: 720
    width: 1280
    sansfont: Times New Roman
    slide-number: c
    show-slide-number: all
  html: 
    css: [bodl.scss, extra.css]
    output-file: intro_visualisation.html
    embed-resources: true    
    toc: true
    toc-depth: 2
include-after: |
  <script type="text/javascript">
    Reveal.on('ready', event => {
      if (event.indexh === 0) {
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
    });
    Reveal.addEventListener('slidechanged', (event) => {
      if (event.indexh === 0) {
        Reveal.configure({ slideNumber: null });
        document.querySelector("div.has-logo > img.slide-logo").style.display = "none";
      }
      if (event.indexh === 1) { 
        Reveal.configure({ slideNumber: 'c' });
        document.querySelector("div.has-logo > img.slide-logo").style.display = null;
      }
    });
  </script>      
knitr: 
  opts_chunk: 
    echo: true
    include: true
    warning: false
    message: false
    fig.align: center
    fig.width: 6
    fig.height: 6
---

# Visualisation in R

## Start a New R Script

- Call the new script: `BasicVisualisation.R`
- Load our favourite package at the top of the script

```{r}
library(tidyverse)
```

::: {.fragment}

- Load the `my_penguins` dataset

```{r}
my_penguins <- read_csv("data/my_penguins.csv")
```

:::

## Introducing The Penguins

::: {style="font-size: 95%"}

```{r}
my_penguins
```


- Contains multiple measurements for penguins recorded around Palmer Station, Antarctica
- Slightly modified version from https://allisonhorst.github.io/palmerpenguins/

:::

## Base Plotting in R

- `R` comes with some very powerful plotting capabilities
    + Provided in the base package `graphics`
    + Always loaded with every session
- Examples are often extremely helpful
- People used happily for decades
    + The release of `ggplot2` changed everything
- Let's quickly explore base plotting before moving to the good stuff

## Base Plotting In R {.slide-only .unlisted}

- Simple plots are usually easy
    + Complex figures can get really messy
- Using the `cars` dataset
    + `speed` (mph)
    + `dist` (ft) each car takes to stop
    
```{r}
#| fig-show: hide
plot(cars)
```

## Base Plotting In R {.slide-only .unlisted}

- The first two columns were automatically placed on the x & y axis
- We could set values for x & y manually
- Automatically decided to plot using points

```{r}
#| fig-show: hide
plot(x = cars$speed, y = cars$dist)
```

## Base Plotting In R {.slide-only .unlisted}

- Using the `my_penguins` dataset to compare flipper length and body mass

```{r}
#| fig-show: hide
plot(x = my_penguins$body_mass_g, y = my_penguins$flipper_length_mm) 
```



## Base Plotting In R {.slide-only .unlisted}

- The function `boxplot()` can also create simple figures easily
- For categorical variables (i.e. factors) we use `R` formula notation
    + `y ~ x` $\implies$ `y` *depends on* `x`, or
    + `y ~ x` $\implies$ `y` *is a function of* `x`

```{r}
#| fig-show: hide
## Make a simple boxplot showing the weights by species
boxplot(body_mass_g ~ species, data = my_penguins)
```

::: {.fragment}

- The dependent variable will always appear on the y-axis
- The predictor will always appear on the x-axis

:::

## Base Plotting In R {.slide-only .unlisted}

- We can also use combinations of predictor variables

```{r}
#| fig-show: hide
## Separate by species and sex
boxplot(body_mass_g ~ sex + species, data = my_penguins)
```


## Base Plotting In R {.slide-only .unlisted}

- Histograms can be produced on an individual column
    + The number of breaks can be set manually
- The default is pretty useful here
    + Generally simple figures without complexity

```{r}
#| fig-show: hide
hist(my_penguins$body_mass_g, breaks = 20, xlab = "Body Mass (g)")
```

# Visualisation With `ggplot2` {background-color="#3d3d40" background-image=https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/ggplot2.png background-size="25%" background-opacity="0.4" background-position='80% 20%'}


## The Grammar of Graphics

- `ggplot2` has become the industry standard for visualisation [@wickham2016-gg]
- Core & essential part of the `tidyverse`
- Developed by Hadley Wickham as his PhD thesis
- An implementation of *The Grammar of Graphics* [@Wilkinson2005-ku]
    + Breaks visualisation into *layers*
    + Each layer added as a new line of code
    
    
## The Grammar of Graphics  {.slide-only .unlisted}

![Taken from https://r.qcbs.ca/workshop03/book-en/grammar-of-graphics-gg-basics.html](assets/gglayers.png){fig-align="left"}



## Beginning Our Plot

```{r}
#| output-location: column
## The initial call to ggplot defines
## the data layer only
ggplot(my_penguins)
```

## Adding Layers 

::: {.notes}
- I'm spreading my code to fit the narrow column in the slide
:::

```{r}
#| code-line-numbers: '3-4,6-9'
#| output-location: column
## The initial call to ggplot defines
## the data layer only.
## Adding aesthetic mappings sets the 
## data range (via the axes)
ggplot(my_penguins) +
  aes(
    x = body_mass_g, 
    y = flipper_length_mm
  )
```

## Adding Layers {.slide-only .unlisted}

- Notice how the call to `ggplot()` was followed by `+`
- This tells `R`: "But wait, there's more to come!"
- Is how we add the layers described in  *The Grammar of Graphics*


## Adding Points

```{r}
#| code-line-numbers: '5-6,12'
#| output-location: column
## The initial call to ggplot defines
## the data layer only.
## Adding aesthetic mappings sets the 
## data range (via the axes)
## Adding `geom_point()` now tells
## ggplot what geometry to use
ggplot(my_penguins) +
  aes(
    x = body_mass_g, 
    y = flipper_length_mm
  ) +
  geom_point()
```

## Tidying The Code

- To write more clearly

```{r}
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm) + # 2: Aesthetic mappings
  geom_point() # 3: Geometry
```

    
## Adding Layers

::: {.notes}
- I'll hide my figures from here to the code looks nicer
:::

- Now we can easily add additional layers
    + e.g. a smooth curve as a statistics layer

```{r}
#| code-line-numbers: '4'
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm) + # 2: Aesthetic mappings
  geom_point() + # 3: Geometry
  stat_smooth() # 5: Statistics
```

## Adding Layers {.slide-only .unlisted}

- Change to a regression line without an error region:
    + `method = "lm", se = FALSE`

```{r}
#| code-line-numbers: '4'
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm) + # 2: Aesthetic mappings
  geom_point() + # 3: Geometry
  stat_smooth(method = "lm", se = FALSE) # 5: Statistics
```

## Additional Aesthetics

- We might like to colour points by species
- Adding this to the main `aes()` will send this mapping to all layers
    + Will produce a regression line for each species

```{r}
#| code-line-numbers: '2'
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm, colour = species) + # 2: Mappings
  geom_point() +  # 3: Geometry
  stat_smooth(method = "lm", se = FALSE) # 5: Statistics
```

## Additional Aesthetics {.slide-only .unlisted}

- We can also include the `sex` of penguins on this figure
- Can easily add as an aesthetic mapping

```{r}
#| code-line-numbers: '2'
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm, colour = species, shape = sex) + 
  geom_point() +  # 3: Geometry
  stat_smooth(method = "lm", se = FALSE) # 5: Statistics
```

::: {.incremental}
- This doesn't work well for the regression lines
- Lines don't have a shape aesthetic $\implies$ ignored by `stat_smooth()`
:::

## Additional Aesthetics {.slide-only .unlisted}

- Aesthetic mappings set in the first call are passed to all layers
- Aesthetics can also be set as *layer-specific*

::: {.fragment}

```{r}
#| code-line-numbers: '2-3'
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm, colour = species) + # 2: Mappings
  geom_point(aes(shape = sex)) +  # 3: Geometry with layer-specific aes
  stat_smooth(method = "lm", se = FALSE) # 5: Statistics
```

:::


## Facets

- Separate panels are known as *facets* in `ggplot2`
    + Plot male & female penguins in separate panels

```{r}
#| code-line-numbers: '4'
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm, colour = species) + # 2: Mappings
  geom_point(aes(shape = sex)) +  # 3: Geometry with layer-specific aes
  facet_wrap(~sex) + # 4: Facets
  stat_smooth(method = "lm", se = FALSE) # 5: Statistics
```

## Facets {.slide-only .unlisted}

- We can "free" each axis within each panel
    + Not always informative

```{r}
#| code-line-numbers: '4'
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm, colour = species) + # 2: Mappings
  geom_point(aes(shape = sex)) +  # 3: Geometry with layer-specific aes
  facet_wrap(~sex, scales = "free") + # 4: Facets
  stat_smooth(method = "lm", se = FALSE) # 5: Statistics
```

## Co-ordinates

- An additional layer is the co-ordinate system
    + Defaults are *always* chosen (unlike geometry)
    + Can modify if we choose
- Quite obvious for points
    + Can transform axes to log~10~ etc

::: {.fragment}
- Applies to colours and shapes as well
- Set using `scale_*()` functions
:::

## Co-ordinates {.slide-only .unlisted}

- Manually set the point shapes
- The options can be seen using `?pch`

```{r}
#| code-line-numbers: '6'
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm, colour = species) + # 2: Mappings
  geom_point(aes(shape = sex)) +  # 3: Geometry with layer-specific aes
  facet_wrap(~sex, scales = "free") + # 4: Facets
  stat_smooth(method = "lm", se = FALSE) + # 5: Statistics
  scale_shape_manual(values = c(1, 19)) # 6: Co-ordinates (i.e. scales)
```

## Co-ordinates {.slide-only .unlisted}

- Colour scales are also set like this
    + `scale_colour_brewer()` is an excellent starting point

```{r}
#| code-line-numbers: '7'
#| fig-show: hide
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm, colour = species) + # 2: Mappings
  geom_point(aes(shape = sex)) +  # 3: Geometry with layer-specific aes
  facet_wrap(~sex, scales = "free") + # 4: Facets
  stat_smooth(method = "lm", se = FALSE) + # 5: Statistics
  scale_shape_manual(values = c(1, 19)) + # 6: Co-ordinates (i.e. scales)
  scale_colour_brewer(palette = "Set1")
```

::: {.fragment}
- Check `brewer` palettes using `RColorBrewer::display.brewer.all()`
:::

## Co-ordinates {.slide-only .unlisted}

- Multiple options for discrete colour palettes
    + `scale_colour_manual(values = c("red", "blue", "green"))`
    + `scale_colour_viridis_d()`
    
::: {.fragment}
- Colourblind palettes are provided in `ggthemes`
    + `scale_colour_colorblind()`
    
:::

## Co-ordinates {.slide-only .unlisted}

```{r}
#| code-line-numbers: '1,8'
#| fig-show: hide
library(ggthemes)
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm, colour = species) + # 2: Mappings
  geom_point(aes(shape = sex)) +  # 3: Geometry with layer-specific aes
  facet_wrap(~sex, scales = "free") + # 4: Facets
  stat_smooth(method = "lm", se = FALSE) + # 5: Statistics
  scale_shape_manual(values = c(1, 19)) + # 6: Co-ordinates (i.e. scales)
  scale_colour_colorblind() # Stoopid American spelling
```

::: {.fragment}

- Scales often require an understanding of discrete vs continuous, e.g.
    + `scale_x_continuous()` for continuous data
    + `scale_x_discrete()` for categorical data
    + `scale_colour_gradient()` for continuous data (e.g. heatmaps)

:::

## Themes

- The final grammar of graphics layer $\implies$ themes
- Controls overall appearance: 
    + fontsizes, background style, title/legend placement etc
- Will explore in detail later if we have time

::: {.fragment}
- We do need to get rid of the horrible grey background though
:::

## Themes {.slide-only .unlisted}

- `theme_bw()` applies a generally usable set of defaults

```{r}
#| code-line-numbers: '9'
#| fig-show: hide
library(ggthemes)
ggplot(my_penguins) + # 1: Define the data layer
  aes(x = body_mass_g, y = flipper_length_mm, colour = species) + # 2: Mappings
  geom_point(aes(shape = sex)) +  # 3: Geometry with layer-specific aes
  facet_wrap(~sex, scales = "free") + # 4: Facets
  stat_smooth(method = "lm", se = FALSE) + # 5: Statistics
  scale_shape_manual(values = c(1, 19)) + # 6: Co-ordinates (i.e. scales)
  scale_colour_colorblind() + # Stoopid American spelling
  theme_bw() # 7: The overall theme
```

::: {.fragment}
- I often call `theme_set(theme_bw())` at the start of a session
    + Sets as the theme for all subsequent plots
    
:::


# Additional Geometries {background-color="#3d3d40" background-image=https://raw.githubusercontent.com/rstudio/hex-stickers/main/PNG/ggplot2.png background-size="25%" background-opacity="0.4" background-position='80% 20%'}



## Additional Geometries 

- The choice of appropriate geometry is usually data-driven
    + Same principle as `aes()` / `geom_point()`
    + May have different mappings

::: {.incremental}

- Lines: `geom_line()`, `geom_abline()`, `geom_hline()`, `geom_vline()`
- Distributions: `geom_boxplot()`, `geom_violin()`
- Histograms: `geom_histogram()`, `geom_density()`
- Bar Plots: `geom_bar()`, `geom_col()` + `geom_errorbar()`
- Heatmaps: `geom_tile()`, `geom_raster()`, `geom_rect()`

:::

## Making Boxplots

```{r}
#| output-location: column
ggplot(
  my_penguins,
  aes(species, body_mass_g)
) +
  geom_boxplot() +
  theme_bw()
```

## Making Boxplots {.slide-only .unlisted}


```{r}
#| code-line-numbers: '1,3-5'
#| output-location: column
## Map sex to the fill aesthetic
ggplot(my_penguins) +
  aes(
    species, body_mass_g, fill = sex
  ) +
  geom_boxplot() +
  theme_bw()
```

## Histograms

- The default histogram usually looks terrible
    + Very easy to fix

```{r}
#| output-location: column
## Map sex to the fill aesthetic
ggplot(my_penguins) +
  aes(x = body_mass_g, fill = sex) +
  geom_histogram() +
  theme_bw()
```


## Histograms {.slide-only .unlisted}

- The default histogram usually looks terrible
    + Very easy to fix
    + Changing `binwidth` and setting `colour` (outline)

```{r}
#| output-location: column
ggplot(my_penguins) +
  aes(x = body_mass_g, fill = sex) +
  geom_histogram(colour = "black", binwidth = 100) +
  facet_grid(sex~species) +
  theme_bw()
```


## Closing Comments

- The top-level `aes()` can also be set in the first call to `ggplot()`
    + Is personal preference $\implies$ showed layers clearly today
    
```{r}
#| fig-show: hide
## My code usually looks more like this
ggplot(
  my_penguins, 
  aes(x = body_mass_g, fill = sex)
) +
  geom_histogram(colour = "black", binwidth = 100) +
  facet_grid(sex~species) +
  theme_bw()
```

## Closing Comments {.slide-only .unlisted}

- Will explore additional geometries through the course
- Also discuss more detailed `ggplot2` customisation
- Non `ggplot2` options can also be effective:
    + `corrplot()` from the package `corrplot`
    + `pheatmap()` from the package `pheatmap`
    + Venn Diagrams from `VennDiagram`
    + UpSet plots from `UpSetR` (is actually `ggplot`)

## Challenge

1. Load the `pigs` dataset and create a boxplot
    + Show `dose` across the x-axis
    + Fill by supplement type
2. Experiment with `geom_violin()` as an alternative

## References
